% Andrew Garwood
% Coding Homework 1


clear all; close all; clc;

% % % % % Problem 1 % % % % %

% Create Matrix A:
% % Note: e represented by exp(n), n in R
A = [1, -2.3; 4.5, exp(2)]; 

% Create Matrix B:
B = [6, 2, 4, -3; pi, 9, 3.6, -2.1];

% Create Matrix C:
C = [3.7, -2.4, 0; 4, 1.8, -11.6; 2.3, -3.3, 5.9];

% Create Matrix x
% % Note: x seems to be a 3 x 1 Vector i.e. 3D vector
x = [5; sin(4); -3];

% Create Matrix y
% % Note: y seems to be a 2 x 1 vector i.e. 2D row vector
y = [8, -6];

% Create Matrix z
% % Note: similar to x, 4D vector/matrix
z = [3; 0; tan(2); -4.7];

% Problem 1a:
% Calculate 3x and save the result in variable A1
% % output: each element is multiplied by 3
A1 = 3 * x;

% Problem 1b:
% Calculate zT*BT + y
% % Note: 1x4*4x1 + 1x2 -> so the initial matrix multiplication results in
% %       a 1D element. When added to y, each element of y is added by it.
A2 = (z')*(B') + y;

% Problem 1c:
% One of the following is defined: Cx, Cy, Cz. Calculate the one that is
% defined and store it in variable A3
% % Note: C is a 3x3 matrix, so when multiplying a matrix on the right of
% %       C, the matrix must have 3 rows, otherwise it is not defined.
% %       The only possible multiplication is Cx, resulting in a 3x1
A3 = C * x;

% Problem 1d:
% Only one of the following is defined: AB or BA. Calculate
% % Note: Similar to 1c, the first matrix's column dimension must match the
% %       the second matrix's row dimension. So the only possible 
% %       multiplication is AB -> 2x2*2x4 -> 2x4
A4 = A * B;

% Problem 1e:
% One of the following is defined: ATBT or BTAT. Calculate
% % Note: AT is 2x2. BT is 4x2. So only BTAT is defined.
% % BT*AT -> 4x2 * 2x2 -> 4x2
A5 = B' * A';


% % % % % Problem 2 % % % % %

% Problem 2a:
% Make row vector x with 73 evenly spaced elements beginnign with -4 and
% ending with 1. Note: x changed with A6
A6 = linspace(-4, 1, 73);
% % L = length(x); verify length of x. length(x) = 73

% Problem 2b:
% Make a row vector y = (cos(0), cos(1) . . . cos(72)) -> 73 elements
% % create index array with elements [0, 72]
indices = [0:72]; 
% % % create array/ row vector A7 
A7 = cos(indices); 
% % L = length(A7); verify length of A7 -> 73 elements

% Problem 2c:
% Calculate the vector whose products are the elements of x (A6) and y (A7)
% % Note: we want to multiply element wise, so use the .* syntax
A8 = A6.*A7;
% % L = length(A8); verify length of A8

% Problem 2d: 
% Calculate vector whose elements are the ratio of elements x and y.
% % Note: similar to 2c, use the ./ operator
A9 = A6./A7;
% % L = length(A9); Verify length of A9

% Problem 2e:
% Calculate vector of form x^3 - y
A10 = A6.^(3) - A7;
% % L = length(A10); Verify lenght of A10


% % % % % Problem 3 % % % % %
% Calculating population density
% P(t + 1) = r*P(t)(1 - ( (P(t)) / K ))

% Problem 3a:
% given t = 0, P(0) = 3, K = 20, r = 2.5, find P(3)
K = 20;
r = 2.5;
P0 = 3;
P1 = r * P0 * (1 - (P0 / K));
P2 = r * P1 * (1 - (P1 / K));
% % P3 = A11
A11 = r * P2 * (1 - (P2 / K)); % % Note: A11 = 12.4081

% Problem 3b:
% given P0 = 8 K = 14 r = 3.2
% % copying and pasting, probably efficient to use a loop so we'll see how
% % in future lessons
K = 14;
r = 3.2;
P0 = 8;
P1 = r * P0 * (1 - (P0 / K));
P2 = r * P1 * (1 - (P1 / K));
P3 = r * P2 * (1 - (P2 / K));
% % P4 = A12
A12 = r * P3 * (1 - (P3 / K));

% % % 
% P(t + 1) = P(t) * exp(r * (1 - ((P(t) / K)) ))

% Problem 3c:
% P(0) = 5, K = 12 and r = 2.6. Calculate P(3) and save it in a
% variable named A13
K = 12;
r = 2.6;
P0 = 5;
P1 = P0 * exp(r * (1 - (P0 / K)));
P2 = P1 * exp(r * (1 - (P1 / K)));
% % A13 = P3
A13 = P2 * exp(r * (1 - (P2 / K)));

% Problem 3d:
% Now suppose that P(0) = 2, K = 25 and r = 3. Calculate P(4) and save it in
% a variable named A14
K = 25;
r = 3;
P0 = 2;
P1 = P0 * exp(r * (1 - (P0 / K)));
P2 = P1 * exp(r * (1 - (P1 / K)));
P3 = P2 * exp(r * (1 - (P2 / K)));
% % A14 = P4
A14 


 